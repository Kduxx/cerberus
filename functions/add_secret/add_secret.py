import boto3
import os
from boto3 import resource
from boto3.dynamodb.conditions import Key, Attr
import json
import secrets
import string
import random

APPLICATION_NAME=os.environ.get('APPLICATION_NAME')

dynamodb = resource("dynamodb")
secrets_table = dynamodb.Table(APPLICATION_NAME + 'Secrets')

def get_parameter(post_parameters, parameter):

    try:
        return post_parameters[parameter]

    except:
        return None


def handler(event, context):
    try:
        post_parameters = json.loads(event['body'])
    except:

        return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': {
                                    'Success': False,
                                    'Message': 'You passed an invalid json'}
                                    })
            }


    if post_parameters:

        title = get_parameter(post_parameters, 'title')
        secret = get_parameter(post_parameters, 'secret')
        username = get_parameter(post_parameters, 'username')
        description = get_parameter(post_parameters, 'description')
        secret_size = get_parameter(post_parameters, 'secret_size')
        autogenerate = get_parameter(post_parameters, 'autogenerate')

        if not title and not secret:

            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': {
                                    'Success': False,
                                    'Message': 'You have to pass, at least, the secret title and the secret itself'
                }
                                    })
            }

        elif not secret and not autogenerate:
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': {
                                    'Success': False,
                                    'Message': 'You have to define the secret since you did not specified if you want it to be autogenerated or not'}
                                    })
            }
        elif autogenerate and secret_size:

            generated_secret = generate_secret(secret_size)
            result = add_secret(title=title, secret=generated_secret, description=description, username=username)
            return {
                'statusCode': result['status_code'],
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': result})
            }

        elif autogenerate and not secret_size:

            generated_secret = generate_secret()
            result = add_secret(title=title, secret=generated_secret, description=description, username=username)
            return {
                'statusCode': result['status_code'],
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': result})
            }

        elif autogenerate and secret:
            return {
                'statusCode': 400,
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult':{
                    'Success': False,
                    'Message': 'You cannot specify the secret and ask it to be auto generated'}})}

        elif secret:

            result = add_secret(title=title, secret=secret, description=description, username=username)
            return {
                'statusCode': result['status_code'],
                'headers': {'Content-Type': 'application/json'},
                'body': json.dumps({'RequestResult': result})
            }
    else:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'RequestResult':{
                                'Success':False,
                                'Message':'You have to pass a parameter'}})}

def secret_exists(secret_title):

    function_name = '{}-get_secret'.format(os.environ.get('APPLICATION_NAME'))
    secret = boto3.client('lambda').invoke(
        FunctionName=function_name,
        Payload=json.dumps({"queryStringParameters": {"secret_title": secret_title}})
    )['Payload'].read().decode('utf-8')

    print(json.loads(secret))
    return True

def add_secret(title, secret=None, description=None, username=None):

    if secret:
        if secret_exists(title):
            return {'Warning': True, 'Message': 'A secret with this title already exists', 'status_code': 200}
        function_name = '{}-encrypt_secret'.format(os.environ.get('APPLICATION_NAME'))
        secret = boto3.client('lambda').invoke(
            FunctionName=function_name,
            Payload=json.dumps({'secret': secret})
        )['Payload'].read().decode('utf-8')

    item_dict = {'title': title, 'description': description, 'username': username, 'secret': secret, 'search_name':title.lower().replace(' ', '_')}
    secrets_table.put_item(Item=item_dict)
    return {'Success': True, 'Message':'Secret created successfully', 'status_code': 201}

def generate_secret(size=64):
    secret_characters = string.ascii_letters + string.digits + string.punctuation.replace('\'', '').replace('\"', '')
    return ''.join(random.choice(secret_characters) for i in range(size))
